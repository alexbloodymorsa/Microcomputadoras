PROCESSOR 16f877	;Procesador a utilizar
INCLUDE <p16f877.INC>

VALOR equ h'20' 		;1er valor para el retardo
VALOR1 equ h'21'		;2do valor para el retardo
VALOR2 equ h'22'		;3er valor para el retardo

CENT EQU h'23'			;almacena el dígito de las centenas
DECE EQU h'24'			;almacena el dígito de las decenas
UNI EQU h'25'			;almacena el dígito de las unidades
NUM_DECIMAL EQU h'26'	;almacena el número a convertir a decimal


NUM_HEXA EQU h'27'		;almacena el número a convertir a hexadecimal
ALTO_HEXA EQU h'28' 	;almacena el dígto alto hexadecimal
BAJO_HEXA EQU h'29'		;almacena el dígto bajo hexadecimal

NUM_BINARIO EQU h'2A'	;almacena el número a convertir a binario
CONTA_BINARIO EQU h'2B'	;contador para la conversión a binario

NUM_VOLT EQU h'2C'
V48 equ B'11111010'	;Valor calculado de 4.8V
V4 equ B'11010000'	;Valor calculado de 4V
V3 equ B'10011100'	;Valor calculado de 3V
V2 equ B'01101000'	;Valor calculado de 2V
V1 equ B'00110100'	;Valor calculado de 1V

NUM_PILA EQU h'2D'

ORG 0 					;vector de reset
GOTO INICIO				;salto al inicio del programa

ORG 5					;Origen del programa



INICIO: 
	CLRF PORTA		;limpia Puerto A
	CLRF PORTB		;limpia Puerto B
 
	BSF STATUS, 5	;BIT 5 DE STATUS = 1
	BCF STATUS, 6	;BIT 6 DE STATUS = 0, BANCO 01
	CLRF TRISB		;Puerto B como salida
	CLRF TRISA 		;Bits 1-5 Puerto A como salida
	BSF TRISA,0 	;Bit 0 Puerto A como entrada

	MOVLW 0X0E		;W = 0E
	MOVWF ADCON1	;ADCON1 = 0E -> Puerto A (bits 1 a 5) y E digitales, Puerto A (bit 0) analógico
		
	BSF TRISE, 0X00
	BSF TRISE, 0X01
	BSF TRISE, 0X02		;Puerto E como entrada

	MOVLW 0XFF
	MOVWF TRISD		;Puerto D como entrada
	;MOVWF TRISE		;Puerto E como entrada		

	BCF STATUS, 5		;BIT 5 DE STATUS = 0, BANCO 00
	MOVLW B'11000001'	;W = 11000001
	MOVWF ADCON0		;Configura ADCON0 con W: usará reloj interno, canal 0, DONE, conv.A/D encendido
	
	CALL INICIA_LCD		;inicialización de LCD
	MOVLW 0X80			;W = 80
	CALL COMANDO		;manda un control a LCD

SWITCH_3 					;Verifica el valor del Switch de 3 bits
	MOVLW 0X00			;W = 00
	MOVWF CENT 			;CENT = 0
	MOVWF DECE 			;DECE = 0
	MOVWF UNI 			;UNI = 0	

	MOVF PORTE, W 		;W = PORTE
	;SUBLW 0X00			;W = W - 0
	BTFSC STATUS, Z 	;Si Z = 0 salta
	GOTO DECIMAL		;Z = 1: salta a opción 0 (decimal)
	GOTO OPCION1		;Z = 0: PORTE no es 0

OPCION1
	MOVF PORTE, W 		;W = PORTE
	XORLW 0X01			;W = W XOR 1
	BTFSC STATUS, Z 	;Si Z = 0 salta
	GOTO HEXA			;Z = 1: opción 1 (hexadecimal)
	GOTO OPCION2		;Z = 0: PORTE no es 1

OPCION2
	MOVF PORTE, W
	XORLW 0X02
	BTFSC STATUS, Z
	GOTO BINARIO
	GOTO OPCION3

OPCION3
	MOVF PORTE, W
	XORLW 0X03
	BTFSC STATUS, Z
	GOTO VOLTAJE
	GOTO OPCION4

OPCION4
	MOVF PORTE, W
	XORLW 0X04
	BTFSC STATUS, Z
	GOTO PILA
	GOTO SWITCH_3




DECIMAL
	CALL CONVIERTE
	MOVWF NUM_DECIMAL
	GOTO CENTENAS

CENTENAS 
	MOVLW 0X64
	SUBWF NUM_DECIMAL
	BTFSC STATUS, C		;C = 0 NS, C = 0 NS, C = 1 S
	INCF CENT			;CENT = 1, = 2, = 2
	BTFSS STATUS, C		;C =0 S, C = 0 S, C = 1 NS
	GOTO CARGARCENTENA	;  -
	GOTO CENTENAS		;-- 
			
CARGARCENTENA 
	MOVF CENT, W
	ADDLW 0X30
		
	CALL DATOS
	MOVLW 0X64
	ADDWF NUM_DECIMAL
	GOTO DECENAS

DECENAS 
	MOVLW 0X0A
	SUBWF NUM_DECIMAL
	BTFSC STATUS, C
	INCF DECE
	BTFSS STATUS, C
	GOTO CARGARDECENA
	GOTO DECENAS

CARGARDECENA 
	MOVF DECE, W
	ADDLW 0X30
		
	CALL DATOS
	MOVLW 0X0A
	ADDWF NUM_DECIMAL
	GOTO UNIDADES

UNIDADES 
	MOVLW 0X01
	SUBWF NUM_DECIMAL
	BTFSC STATUS, C
	INCF UNI
	BTFSS STATUS, C
	GOTO CARGARUNIDAD
	GOTO UNIDADES

CARGARUNIDAD 
	MOVF UNI, 0X00
	ADDLW 0X30
	
	CALL DATOS
	CALL RET100MS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
		
	GOTO SWITCH_3



			
HEXA
	;BCF STATUS, C
	;BCF STATUS, Z
	CALL CONVIERTE
	MOVWF NUM_HEXA
	ANDLW 0XF0
	MOVWF ALTO_HEXA
	SWAPF ALTO_HEXA
	MOVLW 0X0A
	SUBWF ALTO_HEXA, W
	BTFSS STATUS, C
	GOTO NUMERO_ALTO
	GOTO LETRA_ALTO
			
LETRA_ALTO 
	MOVF ALTO_HEXA, W
	ADDLW 0X37
	CALL DATOS
	GOTO BAJO

NUMERO_ALTO 
	MOVF ALTO_HEXA, W
	ADDLW 0X30
	CALL DATOS
	GOTO BAJO

BAJO 
	;BCF STATUS, C
	;BCF STATUS, Z
	MOVF NUM_HEXA, W
	ANDLW 0X0F
	MOVWF BAJO_HEXA
	MOVLW 0X0A
	SUBWF BAJO_HEXA, W
	BTFSS STATUS, C
	GOTO NUMERO_BAJO
	GOTO LETRA_BAJO

LETRA_BAJO 
	MOVF BAJO_HEXA, W
	ADDLW 0X37
	CALL DATOS
	CALL RET100MS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
	GOTO SWITCH_3

NUMERO_BAJO 
	MOVF BAJO_HEXA, W
	ADDLW 0X30
	CALL DATOS
	CALL RET100MS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
	GOTO SWITCH_3




BINARIO
	CALL CONVIERTE
	MOVWF NUM_BINARIO
			
	MOVLW 0X08
	MOVWF CONTA_BINARIO
			
LOOPBIN	
	RLF NUM_BINARIO
	BTFSS STATUS, C
	GOTO ZERO
	GOTO ONE
			
ZERO	
	MOVLW a'0'
	CALL DATOS
	DECFSZ CONTA_BINARIO
	GOTO LOOPBIN
	CALL RET100MS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
	GOTO SWITCH_3

ONE	
	MOVLW a'1'
	CALL DATOS
	DECFSZ CONTA_BINARIO
	GOTO LOOPBIN
	CALL RET100MS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
	GOTO SWITCH_3




VOLTAJE
	CALL CONVIERTE 
	MOVWF NUM_VOLT

	BTFSS NUM_VOLT,7
	GOTO V125
	MOVLW 0X02
	ADDWF CENT
	MOVLW 0X05
	ADDWF DECE

V125
	BTFSS NUM_VOLT,6
	GOTO V063
	MOVLW 0X01
	ADDWF CENT
	MOVLW 0X02
	ADDWF DECE
	MOVLW 0X05
	ADDWF UNI 

V063
	BTFSS NUM_VOLT,5
	GOTO V032
	MOVLW 0X06
	ADDWF DECE
	CALL INC_CENT
	MOVLW 0X03
	ADDWF UNI
	CALL INC_DECE

V032
	BTFSS NUM_VOLT,4
	GOTO V016
	MOVLW 0X03
	ADDWF DECE
	CALL INC_CENT
	MOVLW 0X02
	ADDWF UNI
	CALL INC_DECE

V016
	BTFSS NUM_VOLT,3
	GOTO V008
	MOVLW 0X01
	ADDWF DECE
	CALL INC_CENT
	MOVLW 0X06
	ADDWF UNI
	CALL INC_DECE

V008
	BTFSS NUM_VOLT,2
	GOTO V004
	MOVLW 0X08
	ADDWF UNI
	CALL INC_DECE

V004
	BTFSS NUM_VOLT,1
	GOTO V002
	MOVLW 0X04
	ADDWF UNI
	CALL INC_DECE

V002
	BTFSS NUM_VOLT,0
	GOTO FINAL_VOLT
	MOVLW 0X02
	ADDWF UNI
	CALL INC_DECE

FINAL_VOLT
	MOVF CENT, W
	ADDLW 0X30
	CALL DATOS
	MOVLW a'.'
	CALL DATOS
	MOVF DECE, W
	ADDLW 0X30
	CALL DATOS
	MOVF UNI, W
	ADDLW 0X30
	CALL DATOS
	MOVLW a' '
	CALL DATOS
	MOVLW a'V'
	CALL DATOS
	CALL RET100MS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
	GOTO SWITCH_3




PILA
	CALL CONVIERTE 
	MOVWF NUM_PILA
	MOVLW 0X40
	CALL COMANDO			
	
	MOVLW V48
	SUBWF NUM_PILA, W
	BTFSS STATUS,C		;ENTRADA < 4.8V?
	GOTO COMP_PILA4		;if true: siguiente comparación
	GOTO PILA_LLENA

COMP_PILA4
	MOVLW V4
	SUBWF NUM_PILA,W
	BTFSS STATUS,C		;ENTRADA < 4V?
	GOTO COMP_PILA3		;if true: siguiente comparación
	GOTO PILA_V45	

COMP_PILA3
	MOVLW V3
	SUBWF NUM_PILA,W
	BTFSS STATUS,C		;ENTRADA < 3V?
	GOTO COMP_PILA2		;if true: siguiente comparación
	GOTO PILA_V34	

COMP_PILA2
	MOVLW V2
	SUBWF NUM_PILA,W
	BTFSS STATUS,C		;ENTRADA < 2V?
	GOTO COMP_PILA1		;if true: siguiente comparación
	GOTO PILA_V23

COMP_PILA1
	MOVLW V1
	SUBWF NUM_PILA,W
	BTFSS STATUS,C		;ENTRADA < 1V?
	GOTO COMP_PILA0
	GOTO PILA_V12

COMP_PILA0
	MOVLW 0x00
	SUBWF NUM_PILA,W
	BTFSS STATUS,Z		;ENTRADA = 0V?
	GOTO PILA_V01
	GOTO PILA_VACIA

PILA_VACIA		
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00010001'
	CALL DATOS
	MOVLW B'00010001'
	CALL DATOS
	MOVLW B'00010001'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	GOTO FINAL_PILA

PILA_V01	
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00010001'
	CALL DATOS
	MOVLW B'00010001'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	GOTO FINAL_PILA

PILA_V12	
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00010001'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	GOTO FINAL_PILA

PILA_V23
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	GOTO FINAL_PILA

PILA_V34		
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	GOTO FINAL_PILA

PILA_V45	
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001010'
	CALL DATOS
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	GOTO FINAL_PILA

PILA_LLENA
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00001110'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS
	MOVLW B'00011111'
	CALL DATOS

FINAL_PILA
	CALL RET100MS
	MOVLW 0X80
	CALL COMANDO
	CALL RET100MS
	MOVLW 0X00
	CALL DATOS
	CALL RET100MS
	CALL RET100MS
	MOVLW H'01'
	CALL COMANDO
	CALL RET100MS
	GOTO SWITCH_3


;Comfiguracion del LCD
INICIA_LCD 
	MOVLW 0X30
	CALL COMANDO
	CALL RET100MS
	MOVLW 0X30
	CALL COMANDO
	CALL RET100MS
	MOVLW 0X38
	CALL COMANDO
	MOVLW 0X0C
	CALL COMANDO
	MOVLW 0X01
	CALL COMANDO
	MOVLW 0X06
	CALL COMANDO
	MOVLW 0X02
	CALL COMANDO
	RETURN

COMANDO 
	MOVWF PORTB		;PORTB = W
	CALL RET200			;LLAMADO A UN RETARDO
	BCF PORTA, 3		;BIT 0 DEL PORTA = 0  --> RS
	BSF PORTA, 4		;BIT 1 DEL PORTA = 1  --> E
	CALL RET200			;LLAMADO A UN RETARDO
	BCF PORTA, 4		;BIT 1 DEL PORTA = 0  --> E
	RETURN

DATOS
	MOVWF PORTB			;PORTB = W
	CALL RET200			;LLAMADO A RETARDO
	BSF PORTA, 3		;BIT 0 DEL PORTA = 1  --> RS
	BSF PORTA, 4		;BIT 1 DEL PORTA = 1  --> E
	CALL RET200			;LLAMADO A RETARDO
	BCF PORTA, 4		;BIT 1 DEL PORTA = 0  --> E
	CALL RET200			;LLAMADO A RETARDO
	CALL RET200			;LLAMADO A RETARDO
	RETURN

CONVIERTE
	BSF ADCON0,2  			;prende bit 2 de ADCON0 -> GO: inicia la comparación
	CALL RETARDO			;llama subrutina de retardo
ESPERA
	BTFSC ADCON0,2 		;checa bit 2 de ADCON0
	GOTO ESPERA			;Si es 1, regresa a la etiqueta ESPERA
	MOVF ADRESH,W 		;Si es 0, W = ADRESH
	RETURN

INC_CENT  
	MOVLW 0X0A 
	SUBWF DECE,W
	BTFSS STATUS, C 
	RETURN
	INCF CENT
	MOVWF DECE
	RETURN

INC_DECE
	MOVLW 0X0A
	SUBWF UNI,W
	BTFSS STATUS, C 
	RETURN
	INCF DECE
	MOVWF UNI
	CALL INC_CENT
	RETURN 


RETARDO
	MOVLW 0X30
	MOVWF VALOR
LOOP 
	DECFSZ VALOR
	GOTO LOOP
	RETURN

RET200 
	MOVLW 0X02
	MOVWF VALOR1
LOOP1
	MOVLW d'164'
	MOVWF VALOR
LOOP2 
	DECFSZ VALOR, 1
	GOTO LOOP2
	DECFSZ VALOR1, 1
	GOTO LOOP1
	RETURN

RET100MS 
	MOVLW 0X03
	MOVWF VALOR
TRES 
	MOVLW 0XFF
	MOVWF VALOR1
DOS
	MOVLW 0XFF
	MOVWF VALOR2
UNO	
	DECFSZ VALOR2
	GOTO UNO
	DECFSZ VALOR1
	GOTO DOS
	DECFSZ VALOR
	GOTO TRES
	RETURN


END		;Fin del programa